# GitHub Actions 워크플로우: Next.js 애플리케이션을 ALB + EC2에 자동 배포
name: Deploy Next.js to ALB + EC2

# 트리거 조건: develop 브랜치에 push가 발생할 때 실행
on:
  push:
    branches:
      - develop

# 배포 작업 정의
jobs:
  deploy:
    # GitHub가 제공하는 최신 Ubuntu 러너에서 실행
    runs-on: ubuntu-latest

    steps:
      # Step 1: 저장소 코드를 러너로 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Node.js 18 환경 설정 및 npm 캐시 활용
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'  # npm 의존성 캐시로 빌드 시간 단축

      # Step 3: 프로덕션용 환경변수 파일 생성 (HTTPS 설정)
      - name: Create environment file before build
        run: |
          # 빌드 전에 환경변수 파일 생성
          # ALB를 통한 HTTPS 접근을 위해 도메인 사용
          cat > .env.production << 'EOF'
          NEXT_PUBLIC_REDIRECT_TO=${{ secrets.EC2_HOST }}/auth/callback
          NEXT_PUBLIC_FRONTEND_URL=${{ secrets.EC2_HOST }}
          NEXT_PUBLIC_BACKEND_URL=https://api.cymply.kr
          EOF

      # Step 4: Node.js 의존성 설치
      - name: Install dependencies
        run: npm ci

      # Step 5: Next.js 애플리케이션 빌드 (HTTPS 환경변수 포함)
      - name: Build Next.js app with environment variables
        env:
          # ALB를 통한 HTTPS 설정
          NEXT_PUBLIC_REDIRECT_TO: ${{ secrets.EC2_HOST }}/auth/callback
          NEXT_PUBLIC_FRONTEND_URL: ${{ secrets.EC2_HOST }}
          NEXT_PUBLIC_BACKEND_URL: https://api.cymply.kr
        run: npm run build

      # Step 6: 배포용 압축 파일 생성
      - name: Create deployment archive
        run: |
          # PM2 프로세스 매니저 설정 파일 생성
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'nextjs-app',
              script: 'npm',
              args: 'start',
              env: {
                NODE_ENV: 'production',
                PORT: 3000,  // ALB 타겟 그룹에서 사용할 포트
                HOST: '0.0.0.0'  // 모든 인터페이스에서 접근 허용
              }
            }]
          };
          EOF
          
          # 배포에 필요한 파일들을 tar.gz로 압축
          tar -czf deployment.tar.gz .next package.json package-lock.json public .env.production ecosystem.config.js

      # Step 7: EC2 서버에 SSH 접속하여 기존 애플리케이션 정리
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          # EC2 연결 정보 - SSH는 IP 주소 사용
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            # 기존 프로세스 정리
            pm2 delete all || true
            pm2 kill || true
            pm2 flush || true
            
            # 포트 3000을 사용하는 모든 프로세스 강제 종료
            sudo lsof -ti:3000 | xargs sudo kill -9 || true
            sudo fuser -k 3000/tcp || true
            
            sleep 3
            
            # 기존 애플리케이션 디렉토리 백업
            if [ -d "~/nextjs-app" ]; then
              cp -r ~/nextjs-app ~/nextjs-app-backup-$(date +%Y%m%d_%H%M%S)
            fi
            
            # 애플리케이션 디렉토리 정리 후 재생성
            rm -rf ~/nextjs-app
            mkdir -p ~/nextjs-app

      # Step 8: 압축된 배포 파일을 EC2로 복사
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          source: "deployment.tar.gz"
          target: "/tmp/"

      # Step 9: EC2에서 파일 압축 해제 및 서비스 설정
      - name: Extract and setup service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            # 애플리케이션 디렉토리로 이동 후 압축 해제
            cd ~/nextjs-app
            tar -xzf /tmp/deployment.tar.gz
            rm /tmp/deployment.tar.gz
            
            # Node.js 의존성 설치
            npm ci --omit=dev
            
            # 기존 서비스 정지
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl stop nextjs-app || true
            pm2 delete all || true
            pm2 kill || true
            
            # 포트 사용 프로세스 정리
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S lsof -ti:3000 | xargs sudo kill -9 || true
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S fuser -k 3000/tcp || true
            sleep 3
            
            # systemd 서비스 파일 생성 (ALB용 최적화)
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S tee /etc/systemd/system/nextjs-app.service > /dev/null <<EOF
            [Unit]
            Description=Next.js Application for ALB
            After=network.target
            Wants=network-online.target
            After=network-online.target
            
            [Service]
            Type=simple
            User=$(whoami)
            WorkingDirectory=/home/$(whoami)/nextjs-app
            ExecStart=/usr/bin/npm start
            Restart=always
            RestartSec=10
            Environment=NODE_ENV=production
            Environment=PORT=3000
            Environment=HOST=0.0.0.0
            StandardOutput=journal
            StandardError=journal
            SyslogIdentifier=nextjs-app
            
            # ALB 헬스체크를 위한 설정
            TimeoutStartSec=60
            TimeoutStopSec=30
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # systemd 서비스 활성화 및 시작
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl daemon-reload
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl enable nextjs-app.service
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl start nextjs-app.service
            
            # 서비스 시작 대기 (ALB 헬스체크 고려)
            sleep 15
            
            # 서비스 상태 확인
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl status nextjs-app.service
            
            # 애플리케이션 응답 확인 (ALB가 사용할 경로)
            echo "🔍 Checking application health..."
            for i in {1..5}; do
              if curl -f http://localhost:3000 >/dev/null 2>&1; then
                echo "✅ Next.js app is responding on port 3000!"
                break
              else
                echo "⏳ Attempt $i/5: App not responding yet, waiting..."
                sleep 5
              fi
            done
            
            # 최종 확인
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Deployment successful! App is ready for ALB health checks."
            else
              echo "❌ App not responding, checking logs..."
              echo ${{ secrets.EC2_PASSWORD }} | sudo -S journalctl -u nextjs-app.service --lines=20
              exit 1
            fi
            
            # 자동 시작 설정 확인
            if echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl is-enabled nextjs-app.service | grep -q "enabled"; then
              echo "✅ Auto-start on boot: ENABLED"
              echo "🎉 EC2 재부팅 시 자동으로 앱이 시작됩니다!"
            else
              echo "❌ Auto-start on boot: DISABLED"
              exit 1
            fi
            
            echo "🚀 Deployment completed successfully!"
            echo "📋 Service status:"
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl is-active nextjs-app.service
            echo ${{ secrets.EC2_PASSWORD }} | sudo -S systemctl is-enabled nextjs-app.service
            echo "🌐 Application will be available at: ${{ secrets.EC2_HOST }}"