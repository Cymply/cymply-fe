# GitHub Actions 워크플로우: Next.js 애플리케이션을 EC2에 자동 배포
name: Deploy Next.js to EC2

# 트리거 조건: develop 브랜치에 push가 발생할 때 실행
on:
  push:
    branches:
      - develop

# 배포 작업 정의
jobs:
  deploy:
    # GitHub가 제공하는 최신 Ubuntu 러너에서 실행
    runs-on: ubuntu-latest

    steps:
      # Step 1: 저장소 코드를 러너로 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Node.js 18 환경 설정 및 npm 캐시 활용
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'  # npm 의존성 캐시로 빌드 시간 단축

      # Step 3: 프로덕션용 환경변수 파일 생성
      - name: Create environment file before build
        run: |
          # 빌드 전에 환경변수 파일 생성
          # EC2_HOST는 GitHub Secrets에서 가져옴 (보안상 숨겨진 값)
          cat > .env.production << 'EOF'
          NEXT_PUBLIC_REDIRECT_TO=${{ secrets.EC2_HOST }}/auth/callback
          NEXT_PUBLIC_FRONTEND_URL=${{ secrets.EC2_HOST }}
          NEXT_PUBLIC_BACKEND_URL=http://34.64.182.180:8080
          EOF

      # Step 4: Node.js 의존성 설치 (npm ci는 package-lock.json 기반으로 정확한 버전 설치)
      - name: Install dependencies
        run: npm ci

      # Step 5: Next.js 애플리케이션 빌드 (환경변수 포함)
      - name: Build Next.js app with environment variables
        env:
          # 애플리케이션 URL 설정 (인증 콜백 및 프론트엔드/백엔드 URL)
          NEXT_PUBLIC_REDIRECT_TO: ${{ secrets.EC2_HOST }}/auth/callback
          NEXT_PUBLIC_FRONTEND_URL: ${{ secrets.EC2_HOST }}
          NEXT_PUBLIC_BACKEND_URL: http://34.64.182.180:8080
        run: npm run build

      # Step 6: 배포용 압축 파일 생성
      - name: Create deployment archive
        run: |
          # PM2 프로세스 매니저 설정 파일 생성
          # PM2는 Node.js 애플리케이션을 프로덕션에서 관리하는 도구
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'nextjs-app',           # 앱 이름
              script: 'npm',                # 실행할 스크립트
              args: 'start',                # npm start 명령어 실행
              env: {
                NODE_ENV: 'production'      # 프로덕션 환경 설정
              }
            }]
          };
          EOF
          
          # 배포에 필요한 파일들을 tar.gz로 압축
          # .next: 빌드된 Next.js 파일
          # package.json, package-lock.json: 의존성 정보
          # public: 정적 파일들
          # .env.production: 환경변수
          # ecosystem.config.js: PM2 설정
          tar -czf deployment.tar.gz .next package.json package-lock.json public .env.production ecosystem.config.js

      # Step 7: EC2 서버에 SSH 접속하여 기존 애플리케이션 정리
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          # EC2 연결 정보 (모두 GitHub Secrets에서 가져옴)
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            # 기존 PM2 프로세스 완전 제거
            pm2 delete all || true    # 모든 PM2 앱 삭제 (실패해도 계속 진행)
            pm2 kill || true          # PM2 데몬 종료
            pm2 flush || true         # PM2 로그 정리
            
            # 포트 3000을 사용하는 모든 프로세스 강제 종료
            # lsof: 포트를 사용하는 프로세스 ID 찾기
            # fuser: 포트를 사용하는 프로세스 종료
            sudo lsof -ti:3000 | xargs sudo kill -9 || true
            sudo fuser -k 3000/tcp || true
            
            # 프로세스 종료 완료를 위한 대기
            sleep 3
            
            # 기존 애플리케이션 디렉토리 백업 (롤백용)
            if [ -d "~/nextjs-app" ]; then
              cp -r ~/nextjs-app ~/nextjs-app-backup-$(date +%Y%m%d_%H%M%S)
            fi
            
            # 애플리케이션 디렉토리 정리 후 재생성
            rm -rf ~/nextjs-app
            mkdir -p ~/nextjs-app

      # Step 8: 압축된 배포 파일을 EC2로 복사
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          source: "deployment.tar.gz"    # 로컬 파일
          target: "/tmp/"                # EC2의 임시 디렉토리에 복사

      # Step 9: EC2에서 파일 압축 해제 및 PM2로 애플리케이션 시작 (자동 재시작 설정)
      - name: Extract and restart application with PM2 auto-startup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          script: |
            # 애플리케이션 디렉토리로 이동 후 압축 해제
            cd ~/nextjs-app
            tar -xzf /tmp/deployment.tar.gz
            rm /tmp/deployment.tar.gz      # 임시 파일 정리
            
            # Node.js 의존성 설치 (프로덕션용만, 개발 의존성 제외)
            npm ci --omit=dev
            
            # 기존 PM2 프로세스 정리
            pm2 delete all || true
            pm2 kill || true
            
            # 포트 3000 사용 프로세스 강제 종료
            sudo lsof -ti:3000 | xargs sudo kill -9 || true
            sudo fuser -k 3000/tcp || true
            sleep 3
            
            # PM2 데몬 시작
            pm2 ping
            
            # 현재 디렉토리가 ~/nextjs-app인지 확인
            echo "Current directory: $(pwd)"
            echo "Files in directory:"
            ls -la
            
            # ecosystem.config.js 파일이 있으면 사용, 없으면 직접 실행
            if [ -f "ecosystem.config.js" ]; then
              echo "Using ecosystem.config.js"
              pm2 start ecosystem.config.js
            else
              echo "Starting with npm directly"
              if sudo ss -tulpn | grep -q :3000; then
                echo "Port 3000 in use, trying port 3001"
                pm2 start npm --name "nextjs-app" -- start -- --port 3001
              else
                pm2 start npm --name "nextjs-app" -- start
              fi
            fi
            
            # PM2 설정 저장
            pm2 save
            
            # PM2 자동 시작 설정
            echo "Setting up PM2 auto-startup..."
            
            # 기존 startup 설정 제거
            pm2 unstartup systemd || true
            
            # startup 명령어 실행
            STARTUP_CMD=$(pm2 startup systemd -u $(whoami) --hp $(eval echo ~$(whoami)) | grep "sudo env" | tail -1)
            if [ ! -z "$STARTUP_CMD" ]; then
              echo "Executing startup command: $STARTUP_CMD"
              eval $STARTUP_CMD || echo "Startup command failed, continuing..."
            fi
            
            # PM2 설정 다시 저장 (startup 설정 후)
            pm2 save
            
            # 애플리케이션 시작 확인
            sleep 5
            pm2 list
            
            # 애플리케이션 응답 확인
            if pm2 list | grep -q "online"; then
              echo "✅ Next.js app started successfully!"
            
              # HTTP 응답 확인
              if curl -f http://localhost:3000 >/dev/null 2>&1; then
                echo "✅ App responding on port 3000"
              elif curl -f http://localhost:3001 >/dev/null 2>&1; then
                echo "✅ App responding on port 3001"
              else
                echo "⚠️ App started but not responding to HTTP requests"
                pm2 logs nextjs-app --lines 10
              fi
            else
              echo "❌ Failed to start Next.js app"
              pm2 logs nextjs-app --lines 20
              exit 1
            fi
            
            # PM2 startup 서비스 상태 확인
            echo "Checking PM2 startup service..."
            if sudo systemctl is-active pm2-$(whoami) >/dev/null 2>&1; then
              echo "✅ PM2 startup service is active"
            else
              echo "⚠️ PM2 startup service not active - manual setup may be required"
              echo "Run these commands manually if needed:"
              echo "  pm2 startup"
              echo "  # Execute the command it outputs"
              echo "  pm2 save"
            fi
            
            echo "🎉 Deployment completed successfully!"
            echo "📝 PM2 configured for auto-restart on EC2 reboot"